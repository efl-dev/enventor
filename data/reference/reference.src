collections { "The <hilight>collections</hilight> represents a theme.</br>The <hilight>collections</hilight> block contains a list of groups that composes a theme.";
   color_classes { "The <hilight>color_classes</hilight> block contains a list of one or more <hilight>color_class</hilight> blocks.</br>Each <hilight>color_class</hilight> allows designers to name an arbitary group of colors to be used in the theme, the application can use that name to alter the color values at runtime.";
      color_class { "The <hilight>color_class</hilight> allows designers to name an arbitrary group of colors to be used in the theme, the application can use that name to alter the color values at runtime.";
         color { "The main color.";
         }
         color2 { "Used as outline in text and textblock parts.";
         }
         color3 { "Used as shadow in text and textblock parts.";
         }
         name { "Sets the name for the color class, used as reference by both the theme and the application.";
         }
      }
   }

   fonts { "The <hilight>fonts</hilight> block is used to list each font file with an alias used later in the theme.";
      font { "Defines each font file and alias.";
      }
   }

   group { "The <hilight>group</hilight> represents a widget style.</br>The <hilight>group</hilight> block contains parts and programs that compose a widget style.";
      alias { "Additional name to be used as an identifier. Defining multiple aliases is supported.";
      }

      broadcast_signal { "Signal gets automatically broadcasted to all sub group parts. Default is "on".";
      }

      data { "The <hilight>data</hilight> block is used to pass arbitrary parameters from the theme to the application.";
         item { "Defines a new parameter, the value is the string specified next to it.";
         }
      }

      fonts { "The <hilight>fonts</hilight> block is used to list each font file with an alias used later in the theme.";
         font { "Defines each font file and alias.";
         }
      }

      images { "The <hilight>images</hilight> block is used to list each image file which are used in the theme. If any compression method is used, it is also defined here.";
         image { "The <hilight>image</hilight> represents an image file which is used in the theme. If any compression method is used, it is also defined here.";
         }
         set { "The <hilight>set</hilight> block is used to define an image with different content depending on their size.";
            image { "The <hilight>image</hilight> block inside the <hilight>set</hilight> block defines the characteristic of an image. Every block describes one image and the size rule to use it.";
               size { "Defines the minimum and maximum size that selects the specified image.";
               }
               image { "This is included in each image file. Available compression methods are RAW, COMP, LOSSY, and USER.";
               }
            }
            name { "Defines the name that refer to this image description.";
            }
         }
      }

      inherit { "Parent group name for inheritance.</br>Group inherit is used to inherit any predefined group and change some property which belongs to part, description, items or program. The child group has the same properties as its parent group.</br>If you specify the type again in an inherited part, it causes an error.";
      }

      limits { "This block is used to trigger signals when the Edje object is resized.";
         horizontal { "This sends a signal limit,name,over when the object is resized and passes the limit by growing over it.</br>When the object's size is reduced below the limit, signal limit,name,below is sent.</br>This limit is applied on the y axis and is given in pixels.";
         }
         vertical { "This sends a signal limit,name,over when the object is resized and passes the limit by growing over it.</br>When the object's size is reduced below the limit, signal limit,name,below is sent.</br>This limit is applied on the x axis and is given in pixels.";
         }
      }

      max { "The maximum size for the container defined by the totality of the parts.";
      }

      min { "The minimum size for the container defined by the composition of the parts.";
      }

      parts { "The <hilight>parts</hilight> represents visual elements.</br>The <hilight>parts</hilight> block contains a list of parts that describes a basic design element.";
         part { "The <hilight>part</hilight> represents a basic design element such as an image, rectangle or text.</br>The <hilight>part</hilight> block contains a list of descriptions that defines a state of the element.";
            access { "Specifies whether the part uses accessibility feature (1), or not (0).</br>It is set to 0 by default.";
            }
            box { "On a box part, the <hilight>box</hilight> block is used to set other groups as elements of the box.</br>These can be mixed with external objects set by the application through the edje_object_part_box*() functions.";
               items { "The <hilight>items</hilight> block contains a list of <hilight>item</hilight> blocks.</br>Each <hilight>item</hilight> item block contains other group as an element of the box.";
                  item { "The <hilight>item</hilight> item block contains other group as an element of the box.";
                     align { "Sets the alignment hints for this object.";
                     }
                     aspect { "Sets the aspect width and height hints for this object.";
                     }
                     aspect_mode { "Sets the aspect control hints for this object.</br>The available hints are NONE, NEITHER, HORIZONTAL, VERTICAL, and BOTH.";
                     }
                     max { "Sets the maximum size hints for this object.";
                     }
                     min { "Sets the minimum size hints for this object.";
                     }
                     name { "Sets the name of the object via evas_object_name_set()";
                     }
                     options { "Sets extra options for the object.";
                     }
                     padding { "Sets the padding hints for this object.";
                     }
                     prefer { "Sets the preferred size hints for this object.";
                     }
                     source { "Sets the group this object is made of.";
                     }
                     spread { "Replicates the item in a rectangle of size width x height box starting from the defined position of this item.</br>The default value is 1 1.";
                     }
                     type { "Sets the type of the object this item holds.</br>The supported type is GROUP.";
                     }
                     weight { "Sets the weight hints for this object.";
                     }
                  }
               }
            }
            clip_to { "Only renders the area of the part that coincides with the given part.";
            }
            cursor_mode { "Sets where to draw the (blinking) cursor for textblock parts.</br>The available modes are UNDER and BEFORE.";
            }
            desc { "The <hilight>desc</hilight> defines a state of a part.</br>The <hilight>desc</hilight> block contains properties of a part such as size, position, color, image and text.";
               align { "Moves the object relatively along both axis inside its container.</br>For horizontal alignment, 0.0 moves the object to touch the left edge of its container and 1.0 moves the object to touch the right edge of its container.</br>For vertical alignment, 0.0 moves the object to touch the top edge of its container and 1.0 moves the object to touch the bottom edge of its container.</br>The default value is 0.5 0.5.";
               }
               aspect { "Forces the ratio of the width to height to be kept between the minimum and maximum set.</br>For example, 1.0 1.0 increases the width a pixel for every pixel added to height and 2.0 2.0 increases the width two pixels for every pixel added to height.</br>The default value is 0.0 0.0 which disables <hilight>aspect</hilight>.";
               }
               aspect_preference { "Sets the dimensions to which the <hilight>aspect</hilight> property applies.</br>For example, if the dimension is HORIZONTAL, then the object fits its width to its container's width so its height can be longer than its container's height.</br>Available options are BOTH, VERTICAL, HORIZONTAL, SOURCE, and NONE.";
               }
               box { "On a box part, the <hilight>box</hilight> block is used to define how items are displayed inside of the box part.";
                  align { "Moves items relatively along both axis inside the box.</br>For horizontal alignment, 0.0 moves items to touch the left edge of the box and 1.0 moves items to touch the right edge of the box.</br>For vertical alignment, 0.0 moves items to touch the top edge of the box and 1.0 moves items to touch the bottom edge of the box.</br>The default value is 0.5 0.5.";
                  }
                  layout { "Sets how the items are arranged in the box.</br>The available layouts are horizontal (default), vertical, horizontal_homogeneous, vertical_homogeneous, horizontal_max, vertical_max, horizontal_flow, vertical_flow, and stack.";
                  }
                  min { "When any of the parameters is enabled (1) it forces the minimum size of the box to be equal to the minimum size of the items.</br>The default value is 0 0.";
                  }
                  padding { "Sets the padding in pixels between items of the box.</br>The default value is 0 0.";
                  }
               }
               clip_to { "Only renders the area of the part that coincides with the given part.";
               }
               color { "Sets the main color to the specified values in RGBA (between 0 and 255).</br>Notice that the <hilight>color</hilight> of the textblock part is set in the text style.";
               }
               color2 { "Sets the text outline color to the specified values in RGBA (0 to 255).</br>Notice that <hilight>color2</hilight> is valid only for the text part with the outline effect.</br>Notice that the <hilight>color2</hilight> of the textblock part is set in the text style.";
               }
               color3 { "Sets the text shadow color to the specified values in RGBA (0 to 255).</br>Notice that <hilight>color3</hilight> is valid only for the text part with the shadow effect.</br>Notice that the <hilight>color3</hilight> of the textblock part is set in the text style.";
               }
               color_class { "The part uses the color values of the named color_class, these values can be overridden by the <hilight>color</hilight>, <hilight>color2</hilight>, and <hilight>color3</hilight> properties.";
               }
               fill { "Sets how the image is going to fill the image part.";
                  origin { "Sets the starting point of the image relatively to the image part.";
                     offset { "Sets the starting point of the image in pixels from the top-left of the image part.</br>For example, 50 50 fills the image from 50 pixels right and 50 pixels down from the top-left point of the image part.";
                     }
                     relative { "Sets the starting point of the image relatively from the top-left of the image part.</br>For example, 0.1 0.1 fills the image from the 0.1 0.1 relative position of the image part.";
                     }
                  }
                  size { "Sets the tile size.";
                     offset { "Increases the tile size in pixels along each axis.</br>For example, 50 50 increases the tile size by 50 pixels along x and y axis.";
                     }
                     relative { "Sets the tile size relatively to the image size.</br>For example, 0.5 0.5 shrinks the tile size to 1/4 of the image size.";
                     }
                  }
                  smooth { "Specifies whether the smooth scaling is applied to the image when the image is scaled.</br>The default value is 1 (enabled).";
                  }
                  type { "Spicifies whether the image is scaled or tiled to fill the image part.</br>The available types are SCALE (default) and TILE.";
                  }
               }
               fixed { "Specifies whether the minimum size of this part affects the minimum size of the widget (group).</br>Normally, <hilight>fixed</hilight> is used to set a minimum width or height to a line or a point shaped part.</br>For example, rel1 and rel2 of a part are the same position along x axis and the part has a minimum width, then fixed: 1 0 should be applied not to increase the minimum width of the widget infinitely.</br>The default value is 0 0 (the minimum size of the part affects the minimum size of the widget).";
               }
               image { "On an image part, the <hilight>image</hilight> block is used to define how the image is displayed.";
                  border { "Sets the area (in pixels) of each side of the image (left, right, top, and bottom) which is displayed as a fixed size border from the side.</br>The border area is not resized when the image is resized to fill the image part.";
                  }
                  border_scale { "Specifies whether the border is scaled by the object/global scale factors.";
                  }
                  border_scale_by { "If border scaling is enabled then normally the OUTPUT border sizes (e.g. if 3 pixels on the left edge are set as a border, then normally at scale 1.0, those 3 columns are always exactly 3 columns of output, or at scale 2.0 they are 6 columns, or 0.33 they merge into a single column).</br>This property multiplies the input scale factor by this multiplier, allowing the creation of supersampled borders to make higher resolution outputs possible by always using the highest resolution artwork and then runtime scaling it down.</br>Value can be: 0.0 or bigger (0.0 or 1.0 to turn it off).";
                  }
                  middle {
                  }
                  normal {
                  }
                  scale_hint {
                  }
                  tween {
                  }
               }
               inherit {
               }
               limit {
               }
               link {
                  after {
                  }
                  base {
                  }
                  in {
                  }
                  transition {
                  }
               }
               map {
                  alpha {
                  }
                  backface_cull {
                  }
                  color {
                  }
                  light {
                  }
                  on {
                  }
                  perspective {
                  }
                  perspective_on {
                  }
                  rotation {
                     center {
                     }
                     x {
                     }
                     y {
                     }
                     z {
                     }
                  }
                  smooth {
                  }
               }
               max {
               }
               min {
               }
               minmul {
               }
               perspective {
                  focal {
                  }
                  zplane {
                  }
               }
               proxy {
                  source_clip {
                  }
                  source_visible {
                  }
               }
               rel1 {
                  offset {
                  }
                  relative {
                  }
                  to {
                  }
                  to_x {
                  }
                  to_y {
                  }
               }
               rel2 {
                  offset {
                  }
                  relative {
                  }
                  to {
                  }
                  to_x {
                  }
                  to_y {
                  }
               }
               source {
               }
               step {
               }
               table {
                  align {
                  }
                  homogeneous {
                  }
                  min {
                  }
                  padding {
                  }
               }
               text {
                  align {
                  }
                  domain {
                  }
                  ellipsis {
                  }
                  fit {
                  }
                  font {
                  }
                  max {
                  }
                  min {
                  }
                  repch {
                  }
                  size {
                  }
                  size_range {
                  }
                  source {
                  }
                  style {
                  }
                  text {
                  }
                  text_class {
                  }
                  text_source {
                  }
               }
               visible {
               }
            }
            dragable { "When this block is used the part can be dragged around the interface, do not confuse with external drag and drop.</br>By default Edje (and most applications) attempts to use the minimal size possible for a draggable part.</br>If the min property is not set in the description the part is (most likely) set to 0px width and 0px height, thus invisible.";
               confine { "Limits the movement of the dragged part to another part's container.</br>Set a min size for the part, or the dragged object will not show up.";
               }
               events { "Causes the part to forward the drag events to another part, thus ignoring them for itself.";
               }
               threshold { "When set, the movement of the dragged part can only start when it get moved enough to be outside of the threshold part.";
               }
               x { "Used to set up dragging events for the X axis.</br>The first parameter is used to enable (1 or -1) and disable (0) dragging along the axis.</br>When enabled, 1 sets the starting point at 0.0 and -1 at 1.0.</br>The second parameter takes any integer and limits movement to values divisible by it, causing the part to jump from position to position.</br>If the second parameter, step, is set to 0 it is calculated as width of confine part divided by the third parameter,count.";
               }
               y { "Used to set up dragging events for the Y axis.</br>The first parameter is used to enable (1 or -1) and disable (0) dragging along the axis.</br>When enabled, 1 sets the starting point at 0.0 and -1 at 1.0.</br>The second parameter takes any integer and limits movement to values divisible by it, causing the part to jump from position to position.</br>If the second parameter, step, is set to 0 it is calculated as height of confine part divided by the third parameter, count.";
               }
            }
            effect { "Applies the selected outline, shadow, or glow effect to textblock parts.</br>The available effects are PLAIN, OUTLINE, SOFT_OUTLINE, SHADOW, SOFT_SHADOW, OUTLINE_SHADOW, OUTLINE_SOFT_SHADOW, FAR_SHADOW, FAR_SOFT_SHADOW, and GLOW.</br>The available shadow directions definitions are BOTTOM_RIGHT, BOTTOM, BOTTOM_LEFT, LEFT, TOP_LEFT, TOP, TOP_RIGHT, and RIGHT (default is BOTTOM_RIGHT).";
            }
            entry_mode { "Sets the edit mode for textblock parts.</br>The available modes are NONE, PLAIN, EDITABLE, and PASSWORD.";
            }
            ignore_flags { "Specifies whether events with the given flags are ignored, i.e., do not emit signals to the parts.</br>Multiple flags must be separated by spaces, the effect is ignoring all events with one of the flags specified.</br>The available flags are NONE and ON_HOLD";
            }
            insert_after { "Inserts the part above the given part.</br>Notice that one part cannot have both insert_before and insert_after.</br>Notice that one part cannot refer more than one by insert_after.";
            }
            insert_before { "Inserts the part below the given part.</br>Notice that one part cannot have both insert_before and insert_after.</br>Notice that one part cannot refer more than one by insert_before.";
            }
            mouse_events { "Specifies whether the part receives mouse events or not.</br>The default value is 1 (receiving mouse events).";
            }
            multiline { "Specifies whether multiple lines are allowed for editable textblock parts.";
            }
            pointer_mode { "Sets the mouse pointer behavior for the given part.</br>The default value is AUTOGRAB.</br>The available modes are AUTOGRAB and NOGRAB.";
            }
            repeat_events { "Specifies whether the part passes mouse events to other parts below it.</br>The default value is 0 (not passing mouse events).";
            }
            scale { "Specifies whether the part scales its size with an Edje scaling factor.</br>This is used to scale properties such as font size, min/max size of the part, and it can also be used to scale based on DPI of the target device.</br>The default value is 0 (not scaling).";
            }
            select_mode { "Sets how the text selection is triggered for textblock parts.</br>The available modes are DEFAULT and EXPLICIT.";
            }
            source { "Sets the given group to the group/textblock parts.";
            }
            table { "On a box part, the <hilight>table</hilight> block is used to set other groups as elements of the box.</br>These can be mixed with external objects set by the application through the edje_object_part_box*() functions.";
               items { "The <hilight>items</hilight> block contains a list of <hilight>item</hilight> blocks.</br>Each <hilight>item</hilight> item block contains other group as an element of the box.";
                  item { "The <hilight>item</hilight> item block contains other group as an element of the box.";
                     align { "Sets the alignment hints for this object.";
                     }
                     aspect { "Sets the aspect width and height hints for this object.";
                     }
                     aspect_mode { "Sets the aspect control hints for this object.</br>The available hints are NONE, NEITHER, HORIZONTAL, VERTICAL, and BOTH.";
                     }
                     max { "Sets the maximum size hints for this object.";
                     }
                     min { "Sets the minimum size hints for this object.";
                     }
                     name { "Sets the name of the object via evas_object_name_set()";
                     }
                     options { "Sets extra options for the object.";
                     }
                     padding { "Sets the padding hints for this object.";
                     }
                     position { "Sets the position in the table.";
                     }
                     prefer { "Sets the preferred size hints for this object.";
                     }
                     source { "Sets the group this object is made of.";
                     }
                     span { "Sets how many columns and rows this item uses.</br>The default value is 1 1.";
                     }
                     spread { "Replicates the item in a rectangle of size width x height box starting from the defined position of this item.</br>The default value is 1 1.";
                     }
                     type { "Sets the type of the object this item holds.</br>The supported type is GROUP.";
                     }
                     weight { "Sets the weight hints for this object.";
                     }
                  }
               }
            }
         }

         box { "The <hilight>box</hilight> represents a box part. The <hilight>box</hilight> part is used to contain other objects.</br>The <hilight>box</hilight> block contains a list of descriptions that defines a state of the box part.</br>It also has a row or column.";
            #inherit "collections.group.parts.part";
         }

         group { "The <hilight>group</hilight> represents a group part. The <hilight>group</hilight> part is used to include other group (widget style) inside of it.</br>The <hilight>group</hilight> block contains a list of descriptions that defines a state of the group part.";
            #inherit "collections.group.parts.part";
         }

         image { "The <hilight>image</hilight> represents an image part. The <hilight>image</hilight> part is used to display an image file.</br>The <hilight>image</hilight> block contains a list of descriptions that defines a state of the image part.";
            #inherit "collections.group.parts.part";
         }

         proxy { "The <hilight>proxy</hilight> represents a proxy part. The <hilight>proxy</hilight> part is used to clone other part in the same group.</br>The <hilight>proxy</hilight> block contains a list of descriptions that defines a state of the proxy part.";
            #inherit "collections.group.parts.part";
         }

         rect { "The <hilight>rect</hilight> represents a rectangle part. The <hilight>rect</hilight> part is used to draw a rectangle.</br>The <hilight>rect</hilight> block contains a list of descriptions that defines a state of the rectangle part.";
            #inherit "collections.group.parts.part";
         }

         spacer { "The <hilight>spacer</hilight> represents a spacer part. The <hilight>spacer</hilight> part is used as a padding area (it is not visible and it does not receive mouse events and it also does not need any memory allocation unlike other parts.).</br>The <hilight>spacer</hilight> block contains a list of descriptions that defines a state of the spacer part.";
            #inherit "collections.group.parts.part";
         }

         swallow { "The <hilight>swallow</hilight> represents a swallow part. The <hilight>swallow</hilight> part is used to set a widget into this part.</br>The <hilight>swallow</hilight> block contains a list of descriptions that defines a state of the swallow part.";
            #inherit "collections.group.parts.part";
         }

         table { "The <hilight>table</hilight> represents a table part. The <hilight>table</hilight> part is used to contain other parts.</br>The <hilight>table</hilight> block contains a list of descriptions that defines a state of the table part.</br>It also has a row and column.";
            #inherit "collections.group.parts.part";
         }

         text { "The <hilight>text</hilight> represents a text part. The <hilight>text</hilight> part is used to write a simple string with single line in this part.</br>The <hilight>text</hilight> block contains a list of descriptions that defines a state of the text part.";
            #inherit "collections.group.parts.part";
         }

         textblock { "The <hilight>textblock</hilight> represents a textblock part. The <hilight>textblock</hilight> part is used to write complex strings and mark-up elements with multiple lines in this part.</br>The <hilight>textblock</hilight> block contains a list of descriptions that defines a state of the textblock part.";
            #inherit "collections.group.parts.part";
         }

         vector { "The <hilight>vector</hilight> represents a vector part. The <hilight>vector</hilight> part is used to display a vector file.</br>The <hilight>vector</hilight> block contains a list of descriptions that defines a state of the vector part.";
            #inherit "collections.group.parts.part";
         }
      }

      programs { "The <hilight>programs</hilight> defines how your interface reacts to events.</br>The <hilight>programs</hilight> block contains a list of programs that reacts to events.";
         program { "The <hilight>program</hilight> defines how your interface reacts to events. The <hilight>program</hilight> can change the state of parts and trigger/listen events.</br>The <hilight>program</hilight> block contains signal, source, action and target.</br>signal is an event that the program is waiting for.</br>source is a part that catches the signal. (e.g. mouse clicking area)</br>action defines what is going to do when the signal is caught. (e.g. changing the state of a part)</br>target is a part that changes its state.";
         }
      }

      script { "The <hilight>script</hilight> block is used to inject embryo scripts to a given Edje theme and it functions in two modalities. When it is included inside a program block, the script is executed every time the program is run, on the other hand, when included directly into a group, part, or description block, it is executed once at the load time, in the load order.";
      }

      sounds { "The <hilight>sounds</hilight> block contains a list of one or more sound samples and tone items.";
         sample { "The <hilight>sample</hilight> block defines the sound sample.";
            name { "Used to include each sound file. Valid types are RAW, COMP, LOSSY, and AS_IS.";
            }
            source { "The sound source file name.";
            }
         }
         tone { "A sound of the given frequency.";
         }
      }

      styles { "The <hilight>styles</hilight> block contains a list of one or more <hilight>style</hilight> blocks.</br>The <hilight>style</hilight> block is used to create style <tags> for advanced TEXTBLOCK formatting.";
         style { "The <hilight>style</hilight> block is used to create style <tags> for advanced TEXTBLOCK formatting.";
            base { "The <hilight>base</hilight> represents style properties that are applied to the text.</br>The available tags that can be used in the style property are as follows.</br>font, font_size, color, color_class, text_class, ellipsis, wrap, style, valign, and align.";
            }
            name { "The name of the style to be used as reference later in the theme.";
            }
            tag { "The <hilight>tag</hilight> defines the meaning of each tag in the style.</br>Style is applied to the text between the beginning tag <tags> and the ending tag </tags>.";
            }
         }
      }
   }

   images { "The <hilight>images</hilight> block is used to list each image file which are used in the theme. If any compression method is used, it is also defined here.";
      image { "The <hilight>image</hilight> represents an image file which is used in the theme. If any compression method is used, it is also defined here.";
      }
      set { "The <hilight>set</hilight> block is used to define an image with different content depending on their size.";
         image { "The <hilight>image</hilight> block inside the <hilight>set</hilight> block defines the characteristic of an image. Every block describes one image and the size rule to use it.";
            size { "Defines the minimum and maximum size that selects the specified image.";
            }
            image { "This is included in each image file. Available compression methods are RAW, COMP, LOSSY, and USER.";
            }
         }
         name { "Defines the name that refer to this image description.";
         }
      }
   }

   sounds { "The <hilight>sounds</hilight> block contains a list of one or more sound samples and tone items.";
      sample { "The <hilight>sample</hilight> block defines the sound sample.";
         name { "Used to include each sound file. Valid types are RAW, COMP, LOSSY, and AS_IS.";
         }
         source { "The sound source file name.";
         }
      }
      tone { "A sound of the given frequency.";
      }
   }

   styles { "The <hilight>styles</hilight> block contains a list of one or more <hilight>style</hilight> blocks.</br>The <hilight>style</hilight> block is used to create style <tags> for advanced TEXTBLOCK formatting.";
      style { "The <hilight>style</hilight> block is used to create style <tags> for advanced TEXTBLOCK formatting.";
         base { "The <hilight>base</hilight> represents style properties that are applied to the text.</br>The available tags that can be used in the style property are as follows.</br>font, font_size, color, color_class, text_class, ellipsis, wrap, style, valign, and align.";
         }
         name { "The name of the style to be used as reference later in the theme.";
         }
         tag { "The <hilight>tag</hilight> defines the meaning of each tag in the style.</br>Style is applied to the text between the beginning tag <tags> and the ending tag </tags>.";
         }
      }
   }
}

color_classes { "The <hilight>color_classes</hilight> block contains a list of one or more <hilight>color_class</hilight> blocks.</br>Each <hilight>color_class</hilight> allows designers to name an arbitary group of colors to be used in the theme, the application can use that name to alter the color values at runtime.";
   color_class { "The <hilight>color_class</hilight> allows designers to name an arbitrary group of colors to be used in the theme, the application can use that name to alter the color values at runtime.";
      color { "The main color.";
      }
      color2 { "Used as outline in text and textblock parts.";
      }
      color3 { "Used as shadow in text and textblock parts.";
      }
      name { "Sets the name for the color class, used as reference by both the theme and the application.";
      }
   }
}

data { "The <hilight>data</hilight> block is used to pass arbitrary parameters from the theme to the application.";
   file { "Defines a new parameter, the value is the contents of the specified file formatted as a single string of text.</br>This property only works with plain text files.";
   }
   item { "Defines a new parameter, the value is the string specified next to it.";
   }
}

fonts { "The <hilight>fonts</hilight> block is used to list each font file with an alias used later in the theme.";
   font { "Defines each font file and alias.";
   }
}

images { "The <hilight>images</hilight> block is used to list each image file which are used in the theme. If any compression method is used, it is also defined here.";
   image { "The <hilight>image</hilight> represents an image file which is used in the theme. If any compression method is used, it is also defined here.";
   }
   set { "The <hilight>set</hilight> block is used to define an image with different content depending on their size.";
      image { "The <hilight>image</hilight> block inside the <hilight>set</hilight> block defines the characteristic of an image. Every block describes one image and the size rule to use it.";
         size { "Defines the minimum and maximum size that selects the specified image.";
         }
         image { "This is included in each image file. Available compression methods are RAW, COMP, LOSSY, and USER.";
         }
      }
      name { "Defines the name that refer to this image description.";
      }
   }
}

styles { "The <hilight>styles</hilight> block contains a list of one or more <hilight>style</hilight> blocks.</br>The <hilight>style</hilight> block is used to create style <tags> for advanced TEXTBLOCK formatting.";
   style { "The <hilight>style</hilight> block is used to create style <tags> for advanced TEXTBLOCK formatting.";
      base { "The <hilight>base</hilight> represents style properties that are applied to the text.</br>The available tags that can be used in the style property are as follows.</br>font, font_size, color, color_class, text_class, ellipsis, wrap, style, valign, and align.";
      }
      name { "The name of the style to be used as reference later in the theme.";
      }
      tag { "The <hilight>tag</hilight> defines the meaning of each tag in the style.</br>Style is applied to the text between the beginning tag <tags> and the ending tag </tags>.";
      }
   }
}